// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v3.12.4
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Recipe } from "./kitchen";

export const protobufPackage = "order";

export interface Empty {
}

export interface OrderID {
  id: number;
}

export interface Order {
  id: number;
  meal: Recipe | undefined;
}

export interface OrderList {
  orders: Order[];
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrdersServiceClient {
  putOrder(request: Empty): Observable<OrderID>;

  getOrders(request: Empty): Observable<OrderList>;

  getOrder(request: OrderID): Observable<Order>;
}

export interface OrdersServiceController {
  putOrder(request: Empty): Promise<OrderID> | Observable<OrderID> | OrderID;

  getOrders(request: Empty): Promise<OrderList> | Observable<OrderList> | OrderList;

  getOrder(request: OrderID): Promise<Order> | Observable<Order> | Order;
}

export function OrdersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["putOrder", "getOrders", "getOrder"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrdersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrdersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDERS_SERVICE_NAME = "OrdersService";
